stroke_df <- read.csv("dataset.csv")
smoking_df <- read.csv("smoking dataset.csv")
plotly
?plotly
library("dplyr")
library("tidyr")
library("ggplot2")
library("dplyr")
library("tidyr")
library("ggplot2")
rm smoking_df
rm(smoking_df)
rm(stroke_df)
stroke_df <- read.csv("dataset.csv")
smoking_df <- read.csv("smoking dataset.csv")
smoking_df <- read.csv("smoking dataset.csv")
smoking_df <- read.csv("smoking_dataset.csv")
View(smoking_df)
View(stroke_df)
sqrt((0.5(1-0.5))/765)
sqrt(0.5(1-0.5))/765)
sqrt(0.5(1-0.5)/765)
sqrt(0.5*0.5/765)
sqrt(0.4*0.6/765)
View(stroke_df)
View(smoking_df)
stroke_df <- read.csv("/data/dataset.csv")
stroke_df <- read.csv("data/dataset.csv")
stroke_df <- read.csv("data/dataset.csv")
View(stroke_df)
smoking_df <- read.csv("data/train_2v.csv")
View(smoking_df)
rm(smoking_df)
other_disease_df <- read.csv("data/train_2v.csv")
View(other_disease_df)
stroke_age_group <- stroke_df %>%
filter(Break_Out_Category == "Age")
View(stroke_age_group)
stroke_age_group <- stroke_df %>%
filter(Break_Out_Category == "Age") %>%
distinct()
View(stroke_age_group)
stroke_age_group <- stroke_df %>%
filter(Break_Out_Category == "Age") #%>%
?distinct
stroke_age_group <- stroke_df %>%
filter(Break_Out_Category == "Age") %>%
select(Break_out)
glimpse(stroke_age_group)
stroke_age_group <- stroke_df %>%
filter(Break_Out_Category == "Age") %>%
group_by(Break_out)
View(stroke_age_group)
stroke_df <- read.csv("data/dataset.csv", stringsAsFactors = FALSE)
other_disease_df <- read.csv("data/train_2v.csv", stringsAsFactors = FALSE)
View(stroke_df)
stroke_age_group <- stroke_df %>%
filter(Break_Out_Category == "Age") %>%
group_by(Break_out)
View(stroke_age_group)
glimpse(stroke_age_group$Break_out)
stroke_age_group <- stroke_df %>%
filter(Break_Out_Category == "Age") %>%
distinct(Break_out)
View(stroke_age_group)
glimpse(stroke_age_group)
install.packages("shiny")
library("shiny")
setwd("~/Desktop/Sophomore/Info201/Lab/Demo")
my_ui <- fluidPage(
h1("Hello Shiny"),
textInput(inputId = "user_name", label = "What is your name?"),
textInput(inputId = "food", label = "What is your favorite food?"),
sliderInput(
inputId = "slide_value",
label = "What is your favorite number?",
min = 0, max = 10, value = c(0,10)
),
radioButtons(inputId = "radio", label = "I am a radio",
choices = c("Coffee", "Tea", "Beer"), selected = "Beer"),
textOutput(outputId = "message"),
plotOutput(outputId = "plot"),
p("Shiny is", strong("kinda"), "fun!")
)
?shinyApp
runApp('~/Desktop/git_practice/book-exercises/chapter-19-exercises/exercise-2')
runApp('~/Desktop/git_practice/book-exercises/chapter-19-exercises/exercise-2')
runApp('~/Desktop/git_practice/book-exercises/chapter-19-exercises/exercise-2')
runApp('~/Desktop/git_practice/book-exercises/chapter-19-exercises/exercise-2')
runApp('~/Desktop/git_practice/book-exercises/chapter-19-exercises/exercise-2')
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my_ui, server = my_server)
# Exercise 2: a basic Shiny app
# Load the `shiny` package
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
my_ui <- fluidPage(
titlePanel("Cost Calculator"),
numericInput(inputId = "number", label = "Price (in dollars)", value = 0, min = 0),
# A `titlePanel()` layout with the text "Cost Calculator"
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput(inputId = "quantity", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
p(strong("Cost")),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput(outputId = "cost")
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
my_server <- function(input_list, output_list) {
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output_list$cost <- renderText({
total <- input_list$price * input_list$quantity
return(paste0("$", total))
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my_ui, server = my_server)
runApp('~/Desktop/git_practice/book-exercises/chapter-19-exercises/exercise-2')
