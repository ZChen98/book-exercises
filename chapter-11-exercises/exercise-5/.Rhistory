)
nycflights13
avg_dep_delay
dep_delay_by_month <- nycflights13 %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(nycflights13$dep_delay)
)
avg_dep_delay
View(nycflights13)
View(nycflights13)
nycflights13 %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(nycflights13$dep_delay)
)
avg_dep_delay = mean(nycflights13$dep_delay)
nycflights13$dep_delay
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
diff_makes <- select(vehicles, make)
View(diff_makes)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
View(flights)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(dep_delay)
)
View(diff_makes)
View(dep_delay_by_month)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(oilabs)
fastfood <- read.csv("http://anna-neufeld.github.io/Stat311/oiLabs/Week5/fastfood.csv")
glimpse(fastfood)
## Mcdonalds and DQ histograms
mcdonalds <- fastfood %>%
filter(restaurant == "Mcdonalds")
dairy_queen <- fastfood %>%
filter(restaurant == "Dairy Queen")
ggplot(data = dairy_queen, aes(x = cal_fat)) +
geom_histogram(binwidth = 80)
ggplot(data = mcdonalds, aes(x = cal_fat)) +
geom_histogram(binwidth = 80)
dep_delay_by_month <- flights %>%
group_by(month)
View(dep_delay_by_month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(dep_time)
)
View(dairy_queen)
View(dep_delay_by_month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = sum(dep_delay)
)
View(dep_delay_by_month)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
View(flights)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = sum(dep_delay)
)
View(dep_delay_by_month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = count(dep_delay)
)
View(dep_delay_by_month)
flights %>%
select(dep_delay)
mean(dep_delay)
flights %>%
+ select(dep_delay) %>%
mean()
?mean
library("dplyr")
flights %>%
group_by(month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(dep_time)
)
View(dep_delay_by_month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(dep_time)
)
View(dep_delay_by_month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(dep_time)
) %>%
pull(month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(dep_time)
)
View(dep_delay_by_month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(dep_delay)
)
View(dep_delay_by_month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(dep_delay, na.rm = FALSE)
)
View(dep_delay_by_month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
View(dep_delay_by_month)
# Which month had the greatest average departure delay?
greatest_avg <- dep_delay_by_month %>%
filter(avg_dep_delay == max(avg_dep_delay))
# Which month had the greatest average departure delay?
greatest_avg <- dep_delay_by_month %>%
filter(avg_dep_delay == max(avg_dep_delay)) %>%
pull(month)
print(greatest_avg)
?plot
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot_delay <- dep_delay_by_month %>%
plot(month, avg_dep_delay)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot_delay <- dep_delay_by_month %>%
plot(x = month, y = avg_dep_delay)
View(dep_delay_by_month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
plot(month, avg_dep_delay)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
dep_delay_by_month %>%
plot(month, avg_dep_delay)
View(dep_delay_by_month)
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# `plot()` function
dep_delay_by_month %>%
plot("month", "avg_dep_delay")
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
avg_arr_delay_dest <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
)
View(avg_arr_delay_dest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
avg_arr_delay_dest <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(avg_arr_delay == max(avg_arr_delay))
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
avg_arr_delay_dest <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(avg_arr_delay == max(avg_arr_delay)) %>%
pull(dest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
avg_arr_delay_dest <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(avg_arr_delay == max(avg_arr_delay)) #%>%
View(avg_arr_delay_dest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
avg_arr_delay_dest <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) #%>%
View(avg_arr_delay_dest)
?max
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
avg_arr_delay_dest <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(avg_arr_delay == max(avg_arr_delay), na.rm = TRUE) %>%
pull(dest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
avg_arr_delay_dest <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(avg_arr_delay == max(avg_arr_delay), na.rm = TRUE) %>%
pull(dest)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
avg_arr_delay_dest <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(avg_arr_delay == max(avg_arr_delay, na.rm = TRUE)) %>%
pull(dest)
View(airports)
print(airport)
# You can look up these airports in the `airports` data frame!
airport <- airports %>%
filter(faa == "CAE")
print(airport)
avg_speed = distance / air_time) %>%
select(avg_speed == max(avg_speed))
avg_speed = distance / air_time) %>%
select(avg_speed == max(avg_speed))
avg_speed = distance / air_time) %>%
select(avg_speed = max(avg_speed))
avg_speed = (distance / air_time)) %>%
select(avg_speed = max(avg_speed))
# Which city was flown to with the highest average speed?
highest_avg_speed <- flights %>%
mutate(
avg_speed = (distance / air_time)) #%>%
avg_speed = (distance / air_time)) %>%
select(avg_speed = max(avg_speed))
View(highest_avg_speed)
?mutate
avg_speed = (distance / air_time)) %>%
select(avg_speed = max(avg_speed))
avg_speed = distance / air_time) %>%
select(avg_speed = max(avg_speed))
highest_avg_speed <- flights %>%
mutate(
avg_speed = distance / air_time) %>%
select(avg_speed = max(avg_speed))
View(highest_avg_speed)
avg_speed = distance / air_time) %>%
select(avg_speed == max(avg_speed))
highest_avg_speed <- flights %>%
mutate(
avg_speed = distance / air_time) %>%
select(avg_speed == max(avg_speed))
avg_speed = distance / air_time) %>%
filter(avg_speed = max(avg_speed))
avg_speed = distance / air_time) %>%
filter(avg_speed == max(avg_speed))
highest_avg_speed <- flights %>%
mutate(
avg_speed = distance / air_time) %>%
filter(avg_speed == max(avg_speed))
View(highest_avg_speed)
avg_speed = distance / air_time) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
highest_avg_speed <- flights %>%
mutate(
avg_speed = distance / air_time) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE))
View(highest_avg_speed)
avg_speed = distance / air_time) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE)) %>%
pull(dest)
highest_avg_speed <- flights %>%
mutate(
avg_speed = distance / air_time) %>%
filter(avg_speed == max(avg_speed, na.rm = TRUE)) %>%
pull(dest)
print(highest_avg_speed)
avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(dest, avg_arr_delay)
avg_arr_delay_dest <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
filter(dest, avg_arr_delay)
avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
select(dest, avg_arr_delay)
avg_arr_delay_dest <- flights %>%
group_by(dest) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
select(dest, avg_arr_delay)
View(avg_arr_delay_dest)
left_join(flights, avg_arr_delay_dest)
View(flights)
new_flight <- left_join(flights, avg_arr_delay_dest)
View(new_flight)
largest_avg_arr_delay <- new_flight %>%
filter(avg_arr_delay = max(avg_arr_delay))
largest_avg_arr_delay <- new_flight %>%
filter(avg_arr_delay == max(avg_arr_delay))
View(largest_avg_arr_delay)
largest_avg_arr_delay <- new_flight %>%
filter(avg_arr_delay == max(avg_arr_delay, na.rm = TRUE))
View(largest_avg_arr_delay)
print(largest_avg_arr_delay)
largest_avg_arr_delay <- new_flight %>%
filter(avg_arr_delay == max(avg_arr_delay, na.rm = TRUE)) %>%
pull(dest)
print(largest_avg_arr_delay)
largest_avg_arr_delay <- new_flight %>%
group_by(dest) %>%
filter(avg_arr_delay == max(avg_arr_delay, na.rm = TRUE)) %>%
pull(dest)
print(largest_avg_arr_delay)
largest_avg_arr_delay <- new_flight %>%
group_by(dest) %>%
filter(avg_arr_delay == max(avg_arr_delay, na.rm = TRUE))
largest_avg_arr_delay <- new_flight %>%
group_by(dest) %>%
filter(avg_arr_delay == max(avg_arr_delay, na.rm = TRUE))
print(largest_avg_arr_delay)
View(dep_delay_by_month)
View(new_flight)
View(airlines)
View(flights)
avg_arr_delay_airline <- flights %>%
group_by(carrier) %>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
) %>%
select(carrier, avg_arr_delay)
left_join(airlines, avg_arr_delay_airline)
new_airline <- left_join(airlines, avg_arr_delay_airline)
smallest_avg_arr_delay <- new_airline %>%
filter(avg_arr_delay == min(avg_arr_delay, na.rm = TRUE))
print(smallest_avg_arr_delay)
smallest_avg_arr_delay <- new_airline %>%
filter(avg_arr_delay == min(avg_arr_delay, na.rm = TRUE)) %>%
pull(carrier)
print(smallest_avg_arr_delay)
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library("httr")
library("jsonlite")
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
# Create a variable base_uri that stores the base URI (as a string) for the
# Github API (https://api.github.com)
base_uri <- "https://api.github.com"
endpoint <- "/Repositories/programming-for-data-science"
org_resource <- paste0(base_uri, endpoint)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(org_resource)
View(response)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
content_api <- content(response)
View(content_api)
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
endpoint <- "/repos/programming-for-data-science"
org_resource <- paste0(base_uri, endpoint)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(org_resource)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
content_api <- content(response)
View(content_api)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(org_resource, query = "programming-for-data-science")
# Extract the content of the response using the `content()` function, saving it
# in a variable.
content_api <- content(response)
View(content_api)
View(response)
# Convert the content variable from a JSON string into a data frame.
content_df <- fromJSON(content_api)
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
endpoint <- "/repos/organization"
org_resource <- paste0(base_uri, endpoint)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(org_resource, query = "programming-for-data-science")
t
# Convert the content variable from a JSON string into a data frame.
content_df <- fromJSON(content_api)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
content_api <- content(response)
View(content_api)
View(content_api)
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/orgs/programming-for-data-science"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(org_resource)
# Under the "Repositories" category of the API documentation, find the endpoint
# that will list _repos in an organization_. Then create a variable named
# `org_resource` that stores the endpoint for the `programming-for-data-science`
# organization repos (this is the _path_ to the resource of interest).
org_resource <- "/orgs/programming-for-data-science/repos"
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(base_url, org_resource)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(base_uri, org_resource)
# Send a GET request to this endpoint (the `base_uri` followed by the
# `org_resource` path). Print the response to show that your request worked.
# (The listed URI will also allow you to inspect the JSON in the browser easily).
response <- GET(paste0(base_uri, org_resource))
print(response)
# Extract the content of the response using the `content()` function, saving it
# in a variable.
content_api <- content(response, "text")
# Convert the content variable from a JSON string into a data frame.
content_df <- fromJSON(content_api)
View(content_df)
# How many (public) repositories does the organization have?
print(nrow(org_resource))
# How many (public) repositories does the organization have?
print(nrow(content_df))
# Now a second query:
# Create a variable `search_endpoint` that stores the endpoint used to search
# for repositories. (Hint: look for a "Search" endpoint in the documentation).
search_endpoint <- "/search/repositories"
# Search queries require a query parameter (for what to search for). Create a
# `query_params` list variable that specifies an appropriate key and value for
# the search term (you can search for anything you want!)
query_params <- list(q = "graphics")
print(response)
graphics_repos = fromJSON(response_text)
response_text
# Extract the content of the response and convert it from a JSON string into a
# data frame.
response_text <- content(response, "text")
graphics_repos = fromJSON(response_text)
# How many search repos did your search find? (Hint: check the list names to
# find an appropriate value).
print(graphics_repos$total_count)
print(graphics_repo_names)
print(graphics_repos$total_count)
graphics_repo_names <- graphics_repos$items$full_name[1:5]
print(graphics_repo_names)
graphics_repos = fromJSON(response_text)
response <- GET(paste0(base_uri, search_endpoint), query = query_params)
print(response)
response_text <- content(response, "text")
graphics_repos = fromJSON(response_text)
response_text <- content(response, "text")
graphics_repos = fromJSON(response_text)
response_text <- content(response, "text")
