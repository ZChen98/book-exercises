install.packages(c("devtools", "fueleconomy"))
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View("vehicles")
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
setwd("~/Desktop/git_practice/book-exercises/chapter-11-exercises/exercise-1")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
library(devtools)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
library(dplyr)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy", force = TRUE)
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes_of_cars <- verchile$make
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes_of_cars <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makes)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
unique(makes_of_cars)
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes_of_cars))
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997, ]
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$cty) / 2
View(vehicles_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles[vehicles$drive == "2-Wheel Drive", ]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd <- vehicles[vehicles$drive == "2-Wheel Drive", ]
efficient_2wd <- vehicles_2wd[vehicles_2wd$cty > 20, ]
View(efficient_2wd)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicle_2wd[vehicles_2wd$hwy == min(vehicles_2wd), ]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2wd <- vehicles[vehicles$drive == "2-Wheel Drive", ]
efficient_2wd <- vehicles_2wd[vehicles_2wd$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicle_2wd[vehicles_2wd$hwy == min(vehicles_2wd), ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd), "id"]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), "id"]
# Install and load the "dplyr" library
install.packages("dplyr")
library("dplyr")
?order
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles_1997$hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
length(order(vehicles_1997$hwy))
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles_1997$hwy)
car_of_choice <- vehicles[vehicles$year_choice | vehicles$make_choice, ]
car_of_choice <- vehicles[vehicles$year == 1995 | vehicles$make == "Honda", ]
View(car_of_choice)
car_of_choice <- vehicles[vehicles$year == 1995 & vehicles$make == "Honda", ]
View(car_of_choice)
most_hwy_miles <- function(year_choice, make_choice) {
car_of_choice <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
return(car_of_choice[car_of_choice$hwy == max(car_of_choice$hwy), "id"])
}
# What was the most efficient Honda model of 1995?
most_efficient <- most_hwy_miles(1995, "Honda")
View(most_efficient)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy), "id"]
return(car_of_choice[[car_of_choice$hwy == max(car_of_choice$hwy), "id"]])
most_hwy_miles <- function(year_choice, make_choice) {
car_of_choice <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
return(car_of_choice[car_of_choice$hwy == max(car_of_choice$hwy), "model"])
}
# What was the most efficient Honda model of 1995?
most_efficient <- most_hwy_miles(1995, "Honda")
print(most_efficient)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles)
View(makes)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
diff_makes <- select(vehicles, makes)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
diff_makes <- select(vehicles, makes)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
diff_makes <- select(vehicles, make)
View(diff_makes)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
num_makes <- distinct(vehicles, make)
View(num_makes)
?distinct
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
num_makes <- distinct(diff_makes)
View(num_makes)
diff_makes <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
num_makes <- distinct(diff_makes)
# Filter the data set for vehicles manufactured in 1997
makes_1997 <- filter(vehicles, year == 1997)
View(makes_1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(makes_1997, -hwy)
View(makes_1997)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
makes_1997 <- mutate(makes_1997,
average = (cyl - hwy) / 2)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
makes_1997 <- mutate(makes_1997,
average = (hwy - cty) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
efficient_car <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
View(efficient_car)
worst_vehicle <- vehicles %>%
filter(vehicles, min(hwy)) %>%
pull(id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_vehicle <- vehicles %>%
filter(vehicles, min(hwy)) %>%
pull("id")
worst_vehicle <- vehicles %>%
filter(vehicles, min(hwy)) %>%
pull("id")
worst_vehicle <- vehicles %>%
filter(vehicles, min(hwy)) %>%
pull(vehicles, "id")
worst_vehicle <- vehicles %>%
filter(min(hwy)) %>%
pull("id")
worst_vehicle <- vehicles %>%
filter(hwy == min(hwy)) %>%
pull("id")
most_hwy_miles <- function(year_choice, make_choice) {
most_efficient <- vehicles %>%
filter(year == year_choice, make == make_choice, hwy == max(hwy)) %>%
pull("model")
}
most_hwy_miles <- function(year_choice, make_choice) {
most_efficient <- vehicles %>%
filter(year == year_choice, make == make_choice, hwy == max(hwy)) %>%
pull("model")
return(most_efficient)
}
# What was the most efficient Honda model of 1995?
most_efficient_Honda_1995 <- most_hwy_miles(1995, "Honda")
most_hwy_miles <- function(year_choice, make_choice) {
most_efficient <- vehicles %>%
filter(year == year_choice & make == make_choice & hwy == max(hwy)) %>%
pull("model")
return(most_efficient)
}
# What was the most efficient Honda model of 1995?
most_efficient_Honda_1995 <- most_hwy_miles(1995, "Honda")
most_hwy_miles <- function(year_choice, make_choice) {
most_efficient <- vehicles %>%
filter(year == year_choice & make == make_choice & hwy == max(hwy)) %>%
pull("id")
return(most_efficient)
}
install.packages("nycflights13")
load('library()')
load(dplyr)
load("dplyr")
load('library()')
load('library()')
load('nycflights13')
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library("nycflights13")
library("dplyr")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(nycflights13)
library("nycflights13")
library("nycflights13")
library(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
library("dplyr")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(nycflights13)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(nycflights13)
library(nycflights13)
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
library("dplyr")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
print(nrow(flights))
print(ncol(flights))
??flights
??flights
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights,
dep_delay + arr_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, -(dep_delay + arr_delay))
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights, dep_delay + arr_delay)
time_gaind_lost <- dep_delay + arr_delay
flights <- mutate(flights,
time_gaind_lost)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
time_gaind_lost <- dep_delay + arr_delay
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
time_gaind_lost <-select(flights, dep_delay + arr_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
time_gaind_lost <-select(flights, dep_delay, arr_delay)
View(time_gaind_lost)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights,
dep_delay + arr_delay)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
dim(flights)
colnames(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
dim(flights) #336776 rows, 20 columns
colnames(flights)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
sorted_flights <- flights %>%
mutate(dep_delay + arr_delay) %>%
arrange(-(dep_delay + arr_delay))
View(sorted_flights)
# Make a histogram of the amount of time gained using the `hist()` function
hist(dep_delay + arr_delay)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights, dep_delay + arr_delay)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights, xlab = flight, ylab = dep_delay + arr_delay)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights, xlab = dep_delay + arr_delay)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean_gain_lose <- flights %>%
mean(dep_delay + arr_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights,
delayed_in_air = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
descending_order <- arrange(flights, -delayed_in_air)
?hist
# Make a histogram of the amount of time gained using the `hist()` function
hist(delayed_in_air)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights, delayed_in_air)
# Make a histogram of the amount of time gained using the `hist()` function
summarize(flights, avg = mean(delayed_in_air, na.rm = TRUE))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, avg = mean(delayed_in_air, na.rm = TRUE))
# Make a histogram of the amount of time gained using the `hist()` function
histogram <- flights %>%
hist(delayed_in_air)
# Make a histogram of the amount of time gained using the `hist()` function
histogram <- flights %>%
hist("delayed_in_air")
class(delayed_in_air)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
flights %>%
filter(dest == "SEA")%>%
summarize(avg_delayed = mean(delayed_in_air, na.rm = TRUE)) %>%
pull(avg_delayed)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
sea <- flights %>%
filter(dest == "SEA")%>%
summarize(avg_delayed = mean(delayed_in_air, na.rm = TRUE)) %>%
pull(avg_delayed)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, avg_delayed = mean(delayed_in_air, na.rm = TRUE))
# On average, did flights to SeaTac gain or loose time?
summarize(sea, avg_delayed = mean(delayed_in_air, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
sea <- flights %>%
filter(dest == "SEA")%>%
summarize(avg_delayed = mean(delayed_in_air, na.rm = TRUE))
# On average, did flights to SeaTac gain or loose time?
summarize(sea, avg_delayed = mean(delayed_in_air, na.rm = TRUE))
View(sea)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
sea <- flights %>%
filter(dest == "SEA")%>%
# On average, did flights to SeaTac gain or loose time?
summarize(sea, avg_delayed = mean(delayed_in_air, na.rm = TRUE))
View(sea)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
sea <- flights %>%
filter(dest == "SEA")
# On average, did flights to SeaTac gain or loose time?
summarize(sea, avg_delayed = mean(delayed_in_air, na.rm = TRUE))
