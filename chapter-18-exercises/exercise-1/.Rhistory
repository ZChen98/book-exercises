knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(oilabs)
SD(X) = sqrt(0.42 + 1.27)
SD($X$) = sqrt(0.42 + 1.27)
sqrt(0.42 + 1.27)
sqrt((1.3^2/100))
?qnorm
i <- qnorm(0.25, mean = 10, sd = 5)
ii <- qnorm(0.75, mean = 10, sd = 5)
iii <- (120 + 180) / 2
iv <- (180 - 120) / (0.67 * 2)
?sd
1/35
2/70
160-90
1/70
setwd("~/Desktop/git_practice/book-exercises/chapter-18-exercises/exercise-1")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R") #go to that file, and his ctrl + enter
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
query_params_list <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params_list)
body <- content(response, "text", encodihg = "LTF")
data <- fromJSON(body)
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R") #go to that file, and his ctrl + enter
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
query_params_list <- list("api-key" = nyt_key, "movie_name" = movie_name)
response <- GET(uri, query = query_params_list)
# load relevant libraries
library("httr")
library("jsonlite")
response <- GET(uri, query = query_params_list)
body <- content(response, "text", encodihg = "LTF-8")
data <- fromJSON(body)
View(response)
View(data)
# What kind of data structure did this produce? A data frame? A list?
data
View(data)
ggplot(data = NULL, aes(x=Xs)) +
geom_histogram(binwidth = 1)
ggplot(data = NULL, aes(x = Xs)) +
geom_histogram(binwidth = 1)
coin_outcomes <- c(0,1)
X <- sum(sample(coin_outcomes, size=50, replace = TRUE))
set.seed(111)
Xs <- replicate(1000, sum(sample(coin_outcomes, size=50, replace = TRUE)))
ggplot(data = NULL, aes(x = Xs)) +
geom_histogram(binwidth = 1)
Xsmean <- mean(Xs)
Xssd <- sd(Xs)
ggplot(data = NULL, aes(x = Xs)) +
geom_blank() +
geom_histogram(binwidth = 1, aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = Xsmean, sd = Xssd), col = "tomato")
set.seed(333)
Xs_unfair <- replicate(1000, sum(sample(coin_outcomes, size=50, replace = TRUE, prob = c(0.95, 0.05))))
Xs_unfairmean <- mean(Xs_unfair)
Xs_unfairsd <- sd(Xs_unfair)
ggplot(data = NULL, aes(x = Xs_unfair)) +
geom_blank() +
geom_histogram(binwidth = 1, aes(y = ..density..)) +
stat_function(fun = dnorm, args = c(mean = Xs_unfairmean, sd = Xs_unfairsd), col = "tomato")
